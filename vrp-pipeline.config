#
# This is an exemplary gia_pipeline.config file. 
# It contains configuration entries for the assembly pipeline.
#
#
# author: Pawel Sztromwasser
#


#
# Pipeline inputs
#

[Inputs]

# The pipeline can start from 2 places, which is determined by uncommenting one (and only one) of the options:
# 1) Input run-dir if the pipeline should start from bcl2fastq conversion. 
#    The path should be absolute. The directory is expected to contain SampleSheet.csv file - the input to bcl2fastq.
#run-directory:	/path/to/RUN_ID
#
# 2) Path (GLOB expression) describing location of paired FASTQ files (relative to scratch-root). 
#    Multiple lanes per sample are supported; see pipeline code for the expected naming convention.
#    In dockerized execution mode the path is resolved relative to scratch directory. In regular execution mode the path should be absolute. 
input-fastqs:	/home/pawels/projects/ecoli_mcr-1/raw/*.fastq.gz




#
# Root paths
#

[Paths]

# Root paths for working directory (scratch) and for reference data. Absolute paths must be provided. If scratch-root is unset, current working directory is used.
# When pipeline starts from bcl2fastq conversion (run_folder is set), scratch-root/RUN_ID (where RUN_ID is the same as in run_directory) is created and used as run's working directory. 
# When pipeline starts from FASTQ files, the scratch-root folder is used as a working directory.
# In dockerized mode:
# 1) reference-root will be mounted by docker containers with read-only access
# 2) run's working directory (scratch-root or scratch-root/RUN_ID) will be mounted with RW access
# 3) paths specified in sections Inputs and Resources will be resolved with respect to these root directories.
# In regular execution mode:
# 1) paths specified in Resources section will be resolved with respect to the reference-root directory.
reference-root:	    /persistent/prod/reference
scratch-root:       /home/pawels/projects/ecoli_mcr-1/results

# Optional results- and fastq-archive root directories. Absolute paths must be provided.
# In dockerized mode, these are mounted to docker containers with RO (writing happens outside docker containers).
# If these directories are not set, the FASTQ and/or assembly results are not archived outside the working (scratch) directory.
#results-archive:    /tsd/pXX/data/colossus/archived_results
#fastq-archive:      /tsd/pXX/data/colossus/archived_fastq


# Large-capacity tmp directory (if should be different than /tmp). 
# In dockerized mode it will be mounted to a docker container and used as tmp. 
# If commented out, the /tmp of the docker container is used.
# tmp-directory:		/tmp




#
# Docker settings
#
 
[Docker] 

# Other docker settings
#docker-binary:		docker
#docker-args:		run --rm


[Resources]

reference-genome:           ecoli.fa
adapters-fasta:             /home/ngs/software/Trimmomatic-0.36/adapters/NexteraPE-PE.fa


[Tools]

# Depending on the execution mode (dockerized or regular) the tool's definition should be provided in appropriate format. 
# For dockerized execution provide docker image name/ID, its version, and executable that should be run inside. 
# Exemplary settings below use "giapipe" image repository, and latest version of the image for each tool (NOTE: best practice is to use exact versioning).
# {args} and {interpreter_args} are place-holders for tool/execution arguments and interpreter arguments (such as -XmX4G in Java). 
# Detailed examples can be found in the pipeline source code: function run_cmd.
#

#bcl2fastq:					giapipe/bcl2fastq:latest bcl2fastq
#trimmomatic:				giapipe/trimmomatic:latest trimmomatic

# In regular execution mode (when docker binary setting is commented-out), the path to the tool's executable should be given, 
# or an interpreter (java/python/perl) together with the path to the tool. 
# Similarly as in tool descriptions above, {args} and {interpreter_args} are place-holders for the respective arguments.
#

bcl2fastq:					/home/ngs/software/bcl2fastq-2.18/bin/bcl2fastq {args}
trimmomatic:					java {interpreter_args} -jar /home/ngs/software/Trimmomatic-0.36/trimmomatic-0.36.jar {args} HEADCROP:1
fastqc:						/home/ngs/software/FastQC-0.11.5/fastqc {args}
spades:						/home/ngs/software/SPAdes-3.9.0-Linux/bin/spades.py {args}
quast:						/home/ngs/software/quast-4.4/quast.py {args}

